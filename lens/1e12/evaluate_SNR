#!/usr/bin/env python

import sys
sys.path.append('../../lensGW/')
sys.path.append('../../lensGW-PyCBC-plugin/')
from lgw import *

import h5py
import numpy
import sys, os, logging, argparse
import pycbc.workflow as wf
import pycbc
from pycbc.conversions import mchirp_from_mass1_mass2
from pycbc.waveform.spa_tmplt import spa_length_in_time
from scipy.optimize import minimize_scalar
from multiprocessing import Pool
import configparser
import pycbc.psd
from copy import copy

def eval_time_delay_mag(source_ra, source_dec, lens_ra, lens_dec, zS, zL, mL, lens_model_list, optim):

    from lensGW.utils.utils import TimeDelay, magnifications
    from lensGW.waveform.waveform_utils import lens_waveform_model

    Img_ra, Img_dec, kwargs_lens_list, solver_kwargs = lens_waveform_model.eval_param(
                                                            source_ra, source_dec, [lens_ra], [lens_dec],
                                                            zS, zL, [mL], lens_model_list, optim)
                
    td = TimeDelay(Img_ra, Img_dec, source_ra=source_ra, source_dec=source_dec,
                   zS=zS, zL=zL, lens_model_list=lens_model_list, kwargs_lens_list=kwargs_lens_list,
                   scaled=solver_kwargs['Scaled'], scale_factor=solver_kwargs['ScaleFactor'])

    mus = magnifications(Img_ra, Img_dec, lens_model_list, kwargs_lens_list)

    return td, mus

# loop over number of loudest events to be analyzed
def precalc(num_event):

    time = tc[num_event]
    ifos = []
    for ifo in opts.instruments:
        ifos.append(ifo)
    instr = ' '.join(ifos)

    from pycbc.detector import Detector
    from pycbc import waveform
    from pycbc.filter import sigma
    
    zL = 0.5
    # RUN THIS ISSUE ON CLUSTER
    if z[num_event]-zL > 0.5:
        waveform.add_custom_waveform('lensed', lensed_gw_fd, 'frequency', force=True)
        hp, hc = waveform.get_fd_waveform(
                approximant='lensed', source_ra=ra[num_event], source_dec=dec[num_event], 
                lens_ra=ra[num_event]+0.1, lens_dec=ra[num_event]+0.2, 
                zS=z[num_event], zL=zL, mL=1e12, lens_model_list=['POINT_MASS'],
				mass1=m1s[num_event], mass2=m2s[num_event], inclination=inc[num_event],
	            f_lower=1.0, delta_f=df, distance=dist[num_event])

        if hp is not None and hc is not None:

            td, mus = eval_time_delay_mag(source_ra=ra[num_event], source_dec=dec[num_event], 
                           lens_ra=ra[num_event]+0.1, lens_dec=ra[num_event]+0.2, 
                           zS=z[num_event], zL=zL, mL=1e6, lens_model_list=['POINT_MASS'], optim=True)

            nsnr = flag = nsnr1 = nsnr2 = 0
            for ifo in ifos:

                p = psds[ifo]
                d = Detector(ifo)
                fp, fc = d.antenna_pattern(ra[num_event], dec[num_event], pol[num_event], time)

                ht = hp.copy()
                ht = fp * hp + fc * hc
                if len(td) > 1:
                    ht1 = ht2 = ht.to_timeseries(delta_t=ht.delta_t)
                    ht1 = ht1.crop(td[1]+0.005, 0) # right side image such that hp.end_time=0
                    ht2 = ht2.crop(0, td[1]+0.005) # left side image such that hp.start_time=-hp.duration
                    s1 = sigma(ht1.to_frequencyseries(delta_f=ht.delta_f), psd=psds[ifo], low_frequency_cutoff=flow[ifo])
                    s2 = sigma(ht2.to_frequencyseries(delta_f=ht.delta_f), psd=psds[ifo], low_frequency_cutoff=flow[ifo])
                    nsnr1 += s1 ** 2.0
                    nsnr2 += s2 ** 2.0
                    flag = 1
                else :
                    s = sigma(ht, psd=psds[ifo], low_frequency_cutoff=flow[ifo])
                    nsnr += s ** 2.0
            nsnr = nsnr ** 0.5
            nsnr1 = nsnr1 ** 0.5
            nsnr2 = nsnr2 ** 0.5
            
            print(num_event, nsnr, nsnr1, nsnr2, ifos, td , mus)
            return nsnr, nsnr1, nsnr2, ifos, td , mus

        else : 
            print(num_event, "No image", ifos)
            return -1, -1 ,-1, ifos, 0, 0

    else:
        print(num_event, "zL ~ zS", ifos)
        return 0, 0, 0, ifos, 0, 0


# command line parser
parser = argparse.ArgumentParser()
parser.add_argument("--injection-file")
parser.add_argument("--inference-config")
parser.add_argument("--output-dir")
parser.add_argument("--instruments", nargs='*')

# since data is copied from unlens population to lensed population

pycbc.init_logging(True)

opts = parser.parse_args()

f = h5py.File(opts.injection_file, 'r')
injpath = os.path.abspath(opts.injection_file)

os.mkdir(opts.output_dir)

tc = f['tc'][:]
m1s = f['mass1'][:]
m2s = f['mass2'][:]
z = f['redshift'][:]
cv = f['comoving_volume'][:]
inc = f['inclination'][:]
pol = f['polarization'][:]
ra = f['ra'][:]
dec = f['dec'][:]
dist = f['distance'][:]
mchirps = mchirp_from_mass1_mass2(m1s, m2s)

cp = configparser.ConfigParser()
cp.read(opts.inference_config)

flow = cp.get('model', 'low-frequency-cutoff').split(' ')
flow = {f.split(':')[0]: float(f.split(':')[1]) for f in flow}
df = 1.0 / 8192
fmax = 256
flen = int(fmax / df)

psds = {}

mopt = cp.get('data', 'fake-strain').split(' ')
mopt = {f.split(':')[0]: f.split(':')[1] for f in mopt}
for ifo in mopt:
    print(ifo, mopt[ifo]) # printing PSDs corresponding to ifos
    psds[ifo] = pycbc.psd.from_string(mopt[ifo], flen, df, flow[ifo])

mopt = cp.get('data', 'fake-strain-from-file').split(' ')
mopt = {f.split(':')[0]: f.split(':')[1] for f in mopt}
for ifo in mopt:
    print(ifo, mopt[ifo])
    psds[ifo] = pycbc.psd.from_txt(mopt[ifo], flen, df, flow[ifo], is_asd_file=True)

pool = Pool(4)
data = pool.map(precalc, range(len(tc)))

nsnrs = numpy.array([t[0] for t in data])
nsnrs1 = numpy.array([t[1] for t in data])
nsnrs2 = numpy.array([t[2] for t in data])
ifoss = numpy.array([t[3] for t in data])
tds = numpy.array([t[4] for t in data])
muss = numpy.array([t[5] for t in data])

os.chdir(opts.output_dir)
os.mkdir('injection/')

for num_event in range(len(tc)):
    time = tc[num_event]
    m1 = m1s[num_event]
    m2 = m2s[num_event]
    mchirp = mchirps[num_event]
    cov = cv[num_event]
    ifos = ifoss[num_event]
    instr = ' '.join(ifos)

    # SNR check
    if nsnrs[num_event] < 7 and nsnrs1[num_event] < 7 and nsnrs2[num_event] < 7:
        print(num_event, nsnrs[num_event], ifos, "SKIPPED")
        continue
    else:
        print(num_event, nsnrs[num_event], nsnrs1[num_event], nsnrs2[num_event], ifos)

    # make individual trig ini files
    path = './injection/inj_%s.ini' % num_event
    f = open(path, 'w')
    f.write("""
[data]
trigger-time = %s
injection-file = %s

[global]
instruments = %s
mass1_ref = %s
mass2_ref = %s
minchirp = %s
maxchirp = %s
mincov = %s
maxcov = %s
""" % (time, injpath, instr, m1, m2, mchirp - .0001, mchirp + .0001, cov / 10.0, cov * 10.0))
    f.close()

o = h5py.File('./snrs.hdf', 'w')
o['snrs'] = nsnrs
o['snrs1'] = nsnrs1
o['snrs2'] = nsnrs2
