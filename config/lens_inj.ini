#!/usr/bin/env python
import h5py
import numpy
import sys, os, logging, argparse
import pycbc.workflow as wf
import pycbc
from pycbc.conversions import mchirp_from_mass1_mass2
from pycbc.waveform.spa_tmplt import spa_length_in_time
from scipy.optimize import minimize_scalar
from multiprocessing import Pool
import configparser
import pycbc.psd
from copy import copy

def get_flow(time, m1, m2):
    def dt(flow):
        t = spa_length_in_time(mass1=m1, mass2=m2, f_lower=flow, phase_order=-1) 
        return abs(t - time)
    res = minimize_scalar(dt, [1, 60])
    return res['x']

# loop over number of loudest events to be analyzed
def precalc(num_event):
    count_lensed = count = 0
    time = tc[num_event]
    m1 = m1s[num_event]
    m2 = m2s[num_event]
    mchirp = mchirps[num_event]
    cov = cv[num_event]
    ifos = []

    for ifo in opts.instruments:
        ifos.append(ifo)
    instr = ' '.join(ifos)

    from pycbc.detector import Detector
    from pycbc.waveform import get_fd_waveform
    from pycbc.filter import sigma
    from pycbc import cosmology

    zs = z[num_event] 
    zl = 0.5
    if zs > zl:
        hp, hc = get_fd_waveform(approximant="lgw", 
                            mass1=m1, mass2=m2, inclination=inc[num_event],
                            f_lower=1.0, delta_f=df, distance=dist[num_event],
                            source_ra=ra[num_event], source_dec=dec[num_event], 
                            lens_ra=ra[num_event], lens_dec=dec[num_event]+.3,
                            zs=zs, zl=0.5, mL=1e6, lens_model_list=['POINT_MASS'], optim=True)
        nsnr = 0
        for ifo in ifos:

            p = psds[ifo]
            d = Detector(ifo)
            fp, fc = d.antenna_pattern(ra[num_event], dec[num_event], pol[num_event], time)

            ht = hp.copy()
            ht = fp * hp + fc * hc

            s = sigma(ht, psd=psds[ifo], low_frequency_cutoff=flow[ifo])
            nsnr += s ** 2.0
        nsnr = nsnr ** 0.5

        # echo off
        print(num_event, nsnr, ifos)
    else:
    print(count_lensed, count)

# command line parser
parser = argparse.ArgumentParser()
parser.add_argument("--injection-file")
parser.add_argument("--instruments", nargs='*')
parser.add_argument("--inference-config")

pycbc.init_logging(True)

opts = parser.parse_args()
f = h5py.File(opts.injection_file, 'r')
injpath = os.path.abspath(opts.injection_file)

tc = f['tc'][:]
m1s = f['mass1'][:]
m2s = f['mass2'][:]
z = f['redshift'][:]
cv = f['comoving_volume'][:]
inc = f['inclination'][:]
pol = f['polarization'][:]
ra = f['ra'][:]
dec = f['dec'][:]
dist = f['distance'][:]
mchirps = mchirp_from_mass1_mass2(m1s, m2s)

cp = configparser.ConfigParser()
cp.read(opts.inference_config)

flow = cp.get('model', 'low-frequency-cutoff').split(' ')
flow = {f.split(':')[0]: float(f.split(':')[1]) for f in flow}
df = 1.0 / 8192
fmax = 256
flen = int(fmax / df)

psds = {}

mopt = cp.get('data', 'fake-strain').split(' ')
mopt = {f.split(':')[0]: f.split(':')[1] for f in mopt}
for ifo in mopt:
    print(ifo, mopt[ifo]) # printing PSDs corresponding to ifos
    psds[ifo] = pycbc.psd.from_string(mopt[ifo], flen, df, flow[ifo])

pool = Pool(8)
data = pool.map(precalc, range(len(tc)))

nsnrs = numpy.array([t[0] for t in data])
ifoss = numpy.array([t[1] for t in data])

for num_event in range(len(tc)):
    time = tc[num_event]
    m1 = m1s[num_event]
    m2 = m2s[num_event]
    mchirp = mchirps[num_event]
    cov = cv[num_event]
    ifos = ifoss[num_event]
    instr = ' '.join(ifos)

    # SNR check
    if nsnrs[num_event] < 7:
        print(num_event, nsnrs[num_event], ifos, "SKIPPED")
        continue
    else:
        print(num_event, nsnrs[num_event], ifos)

    # make individual trig ini files
    path = 'injections/inj_%s.ini' % num_event
    f = open(path, 'w')
    f.write("""
[data]
trigger-time = %s
injection-file = %s

[global]
instruments = %s
mass1_ref = %s
mass2_ref = %s
minchirp = %s
maxchirp = %s
mincov = %s
maxcov = %s
""" % (time, injpath, instr, m1, m2, mchirp - .0001, mchirp + .0001, cov / 10.0, cov * 10.0))
    f.close()

o = h5py.File('./snrs.hdf', 'w')
o['snrs'] = nsnrs

